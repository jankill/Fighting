<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
       default-lazy-init="true">
    <context:component-scan
            base-package="org.dongyf.fighting">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Service" />
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Repository" />
    </context:component-scan>
    <!--1、定义一个datasource(数据源)-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://localhost:3306/fightingdb"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>

    </bean>
    <!--2、为这个数据源配置事物-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
            >
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--3、使用已定义的数据源来创建一个SqlSessionFactory,这里使用org.mybatis.spring.SqlSessionFactoryBean来代替SqlSessionFactoryBuilder-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--typeAliasesPackage：它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。多个package之间可以用逗号或者分号等来进行分隔。-->
        <property name="typeAliasesPackage" value="org.dongyf.fighting.model"></property>
        <!--mapperLocations：它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值。-->
        <!--<property name="mapperLocations" value="classpath*:org/dongyf/fighting/mapper/maperXml/*Mapper.xml"></property>
  -->  </bean>
    <!--4、使用sqlSessionFactory来创建一个sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    <!--5、注册MapperFactoryBean 对象，有两种方法-->
    <!--第一种是Mapper较少的情况下使用，每一Mapper 就要定义一个MapperFactoryBean-->
    <!--<bean id="UserMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
    <property name="mapperInterface"
              value="org.dongyf.fighting.mapper.UserMapper" />
    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>-->
    <!--第二种是Mapper较多的情况下使用MapperScannerConfigurer扫描包中的所有接口，并注册为MapperFactoryBean对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.dongyf.fighting.mapper"/>
    </bean>

</beans>
